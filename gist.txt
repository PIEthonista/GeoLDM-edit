sample config of training, see:
sample_config.yaml (obtained from wandb log)

from qm9 RAW .xyz data to used .npz, processing function:
/GeoLDM-edit/qm9/data/prepare/process.py, line 174, def process_xyz_gdb9

processing of above read qm9 dataset, 
/GeoLDM-edit/qm9/data/prepare/process.py, line 36, def process_xyz_files
#   atom_charges used in dataset: charge_dict = {'H': 1, 'C': 6, 'N': 7, 'O': 8, 'F': 9}
#   atom_encodings used in model: {'H': 0, 'C': 1, 'N': 2, 'O': 3, 'F': 4},
#                                 {'C': 0, 'N': 1, 'O': 2, 'F': 3},
#                                  ...
#                                 more refer: configs/datasets_config.py

[WRONG] hydrogen is not used in the one-hot encoding of atom charges/types, see 
the remove('0') here is to remove zero padding only in the above atom_charges, not after atom_encodings in the model
/GeoLDM-edit/qm9/data/dataset_class.py, line 47
    included_species = torch.unique(self.data['charges'], sorted=True)
    if included_species[0] == 0:   # remove H
        included_species = included_species[1:]


main driver for above functions,
/GeoLDM-edit/qm9/data/prepare/qm9.py, line 15, def download_dataset_qm9


'Species' referred in this paper is are the atom types (H,C,N,O,F). Simply put, 
the authors wanna make sure that in the train-test-val split, all atom types listed above
must at least appear once in each split. How to know, refer:
/GeoLDM-edit/qm9/data/utils.py, line 137, def _get_species

train-test torch.dataset:
/GeoLDM-edit/qm9/data/dataset_class.py

one-hot encoding of non-H atoms, see:
/GeoLDM-edit/qm9/data/dataset_class.py, line 62

dataset return, see:
/GeoLDM-edit/qm9/data/dataset_class.py, line 109, def __getitem__
# returned shape {'charges': [max_molecule_num_atoms=29, HCNOF=5],
#                 'positions': [max_molecule_num_atoms=29, xyz=3],
#                  ...
#                 }

dataloader return, see:
/GeoLDM-edit/qm9/data/collate.py, line 65, def collate_fn()
This function specifies how batch data from the dataset class are combined into one during the call of the dataloader.
#    batch['atom_mask'] = batch['charges'] > 0                                  --> [64, about-23-29] cuz dropped 0
#    batch['edge_mask'] = edge_mask.view(batch_size * n_nodes * n_nodes, 1)     --> [64x29x29, 1]
#    batch['charges'] = batch['charges'].unsqueeze(2)                           --> [64, 29, 1]
#        if include_charges=True, else torch.zeros(0)

number of datapoints / rows used for each train-test-val split is controlled in the below, generated during the download of qm9 dataset.
optional, to reset this split, regenerate train-test-split precomputed-presplit datafiles.npz by setting force_download=True in prepare_dataset().
/GeoLDM-edit/qm9/data/prepare/qm9.py, line 109, def gen_splits_gdb9
#    Ntrain = 100000
#    Ntest = int(0.1*Nmols)
#    Nvalid = Nmols - (Ntrain + Ntest)


sample conditioning input / context, see:
/GeoLDM-edit/qm9/utils.py, line 56, def prepare_context()
# [64, n_nodes, nf]  --> [batch_s, n_nodes, num_feats]
# NOTE: n_nodes here vary according to each molecule's num of atoms
#       say if you have 3 features, num_feats might not necessarily be 3 (>=3) because some features might have dimensionality>=2


Model runs on probabilities, hence nodes and conditioning properties have to be converted to Categorical probability distributions.
      CORRECTION, Categorical probability distributions of nodes and conditioning properties are used as distributions to sample 
      number_of_nodes - node_mask during sampling from the model.    (what about conditioning properties?)
      edge_mask = node_mask.unsqueeze(1) * node_mask.unsqueeze(2)
Probability Distribution for graph nodes: qm9/models.py, line 178, class DistributionNodes
#    sampling from this distribution returns the number of nodes. i.e. n_samples=3, return=tensor([16, 17, 15]) / tensor([14, 15, 19]) / tensor([17, 27, 18]) / ...
#    prob dist built on simple {num_of_nodes: frequency} histogram

Probability Distribution for conditioning properties: qm9/models.py, line 222, class DistributionProperty
#    prob dist built as below:
#    distribution[n_nodes] = {'probs': probs, 'params': params}       # for each num_of_nodes, {'probs':torch.Categorical_prob_dist_of_property_corresponding_to_that_num_of_nodes, 'params':[property_min_val, max_val]}
#    if sampling from say n_nodes=19, then sample from the property distribution with num_of_nodes=19, returns value property, shaped [num_args_conditioning]
#    if batch sampling, returns values shaped [bs, num_args_conditioning]

!!! Autoencoder models are _not_ conditioned on time.

main EGNN architecture at:
/GeoLDM-edit/egnn/egnn_new.py

EGNN Encoder/Decoder conditioning of property context via concatenation at:
/GeoLDM-edit/egnn/models.py, line 221
#    if context is not None:
#        # We're conditioning, awesome!
#        context = context.view(bs*n_nodes, self.context_node_nf)
#        h = torch.cat([h, context], dim=1)


Conditioning is only done for the QM9 dataset, in the preprocessed GEOM dataset, no conditional properties from the 
raw drugs_crude.msgpack file is saved. If needed, have to modify the original script to save some. How to? refer to 
official tutorial of GEOM dataset @ https://github.com/learningmatter-mit/geom, tutorials/01_loading_data.ipynb

In the preprocessed datafiles built using build_geom_dataset.py, a maximum of 30 conformations with the lowest 
'totalenergy' is saved for the same molecule.

geom_drugs_30.npy       - contains a large array in the form: [[molecule_id, atomic_num, x, y, z], [..], [..]]
                          NOTE that all atoms of all molecules are combined into a single array. However, atoms
                          from the same molecule will have the same molecule_id.
geom_drugs_smiles.txt   - SMILES of each of the unique molecules (conformers have the same SMILES notations)
geom_drugs_n_30.npy     - holds a list about the number of atoms each molecule holds.




EVALUATION:
===========
Validity: if molecule can be converted to SMILES succesfully
          qm9/rdkit_functions.py, line 87, def compute_validity()

Uniqueness: after validity check, len(set(valid)) / len(valid)
          qm9/rdkit_functions.py, line 102, def compute_uniqueness()

Novelty: if smiles not in self.dataset_smiles_list
          qm9/rdkit_functions.py, line 106, def compute_novelty()



=======================================================================================================
How to build 3D molecule & SMILES from (x,y,z) coordinates and atom types only?

Since we have the (x,y,z) coordinates, we first calculate the pairwise Euclidean distances
between all atoms. Then, based on the types of atoms of the 2 adjacent atoms, and the Euclidean 
distances between them, we can know if they have a bond connection, and also the bond type: 
i.e. none / single / double / triple / aromatic

This can be done due to known values of bond lengths between atoms and bond types, avail in:
qm9/bond_analyze.py

http://www.wiredchemist.com/chemistry/data/bond_energies_lengths.html
http://chemistry-reference.com/tables/Bond%20Lengths%20and%20Enthalpies.pdf

# bond lengths in pm (picometers), 1 angstrom (Ã…) = 100 picometers (pm)

# i.e. single bonds
bonds1 = {'H': {'H': 74, 'C': 109, 'N': 101, 'O': 96, 'F': 92,
                'B': 119, 'Si': 148, 'P': 144, 'As': 152, 'S': 134,
                'Cl': 127, 'Br': 141, 'I': 161},
          'C': {'H': 109, 'C': 154, 'N': 147, 'O': 143, 'F': 135,
                'Si': 185, 'P': 184, 'S': 182, 'Cl': 177, 'Br': 194,
                'I': 214},
          'N': {'H': 101, 'C': 147, 'N': 145, 'O': 140, 'F': 136,
                'Cl': 175, 'Br': 214, 'S': 168, 'I': 222, 'P': 177},
          ...
          'As': {'H': 152}
          }

Then, with the atom_types, Adjacency_Matrix and Edge_Type, we can build a molecule
with rdkit.Chem.RWMol(), from that, we can convert it to SMILES. A successful convertion
means a valid molecule, while a failed one means invalid.

details in qm9/rdkit_functions.py, line 136 onwards:

def build_molecule(...):
    -> def build_xae_molecule(...):

def mol2smiles(...)